# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pacman_pb2 as pacman__pb2


class PacmanGameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlayGame = channel.stream_stream(
                '/pacman.PacmanGame/PlayGame',
                request_serializer=pacman__pb2.PlayerAction.SerializeToString,
                response_deserializer=pacman__pb2.GameState.FromString,
                )
        self.CreateGame = channel.unary_unary(
                '/pacman.PacmanGame/CreateGame',
                request_serializer=pacman__pb2.GameConfig.SerializeToString,
                response_deserializer=pacman__pb2.GameSession.FromString,
                )
        self.ListGames = channel.unary_unary(
                '/pacman.PacmanGame/ListGames',
                request_serializer=pacman__pb2.Empty.SerializeToString,
                response_deserializer=pacman__pb2.GamesList.FromString,
                )


class PacmanGameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PlayGame(self, request_iterator, context):
        """Bidirectional streaming for player actions and game state updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGame(self, request, context):
        """Create a new game session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGames(self, request, context):
        """List available games
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PacmanGameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlayGame': grpc.stream_stream_rpc_method_handler(
                    servicer.PlayGame,
                    request_deserializer=pacman__pb2.PlayerAction.FromString,
                    response_serializer=pacman__pb2.GameState.SerializeToString,
            ),
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=pacman__pb2.GameConfig.FromString,
                    response_serializer=pacman__pb2.GameSession.SerializeToString,
            ),
            'ListGames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGames,
                    request_deserializer=pacman__pb2.Empty.FromString,
                    response_serializer=pacman__pb2.GamesList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pacman.PacmanGame', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PacmanGame(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PlayGame(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/pacman.PacmanGame/PlayGame',
            pacman__pb2.PlayerAction.SerializeToString,
            pacman__pb2.GameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pacman.PacmanGame/CreateGame',
            pacman__pb2.GameConfig.SerializeToString,
            pacman__pb2.GameSession.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pacman.PacmanGame/ListGames',
            pacman__pb2.Empty.SerializeToString,
            pacman__pb2.GamesList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
